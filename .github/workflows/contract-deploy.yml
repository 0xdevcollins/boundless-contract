name: Contract Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'contracts/**'
      - '.github/workflows/contract-deploy.yml'
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to (testnet/mainnet)'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - mainnet
      account:
        description: 'Account to deploy from'
        required: true
        default: 'alice'
        type: string
  repository_dispatch:
    types: [trigger-deploy]
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust and Stellar
        uses: ./.github/actions/setup-rust-stellar

      - name: Deploy/Upgrade contract
        env:
          STELLAR_NETWORK: ${{ github.event.inputs.network || 'testnet' }}
          STELLAR_ACCOUNT: ${{ github.event.inputs.account || 'alice' }}
          STELLAR_SECRET_KEY: ${{ secrets.STELLAR_SECRET_KEY }}
          SOROBAN_SECRET_KEY: ${{ secrets.SOROBAN_SECRET_KEY }}
          CONTRACT_ID: ${{ secrets.CONTRACT_ID }}
        run: |
          echo "Deploying/Upgrading contract on $STELLAR_NETWORK using account $STELLAR_SECRET_KEY"
          
          # Make the script executable
          chmod +x ./deploy_and_upgrade.sh
          
          # Create .stellar directory if it doesn't exist
          mkdir -p .stellar
          
          # If CONTRACT_ID secret is available, save it to the file
          if [ -n "$CONTRACT_ID" ]; then
            echo "Using contract ID from GitHub secrets"
            echo $CONTRACT_ID > .stellar/contract_id_${STELLAR_NETWORK}.txt
          fi
          
          # Run the deploy and upgrade script with upgrade command by default
          ./deploy_and_upgrade.sh deploy $STELLAR_NETWORK $STELLAR_SECRET_KEY
          
          # Check if the contract ID file was created
          if [ -f .stellar/contract_id_${STELLAR_NETWORK}.txt ]; then
            NEW_CONTRACT_ID=$(cat .stellar/contract_id_${STELLAR_NETWORK}.txt)
            echo "Contract ID from file: $NEW_CONTRACT_ID"
            echo "CONTRACT_ID=$NEW_CONTRACT_ID" >> $GITHUB_ENV
            
            # Update the GitHub secret with the new contract ID
            echo "Updating CONTRACT_ID secret..."
            # Note: This requires a separate step with appropriate permissions
          else
            echo "Contract ID file not found. Deployment may have failed."
            exit 1
          fi

      - name: Update CONTRACT_ID secret
        if: success() && env.CONTRACT_ID != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the contract ID from the file
            const network = '${{ github.event.inputs.network || 'testnet' }}';
            const contractIdFile = path.join(process.cwd(), '.stellar', `contract_id_${network}.txt`);
            
            if (fs.existsSync(contractIdFile)) {
              const contractId = fs.readFileSync(contractIdFile, 'utf8').trim();
              
              // Update the repository secret
              await github.rest.actions.createOrUpdateRepoSecret({
                owner: context.repo.owner,
                repo: context.repo.repo,
                secret_name: 'CONTRACT_ID',
                encrypted_value: contractId
              });
              
              console.log(`Updated CONTRACT_ID secret with: ${contractId}`);
            } else {
              console.log('Contract ID file not found. Skipping secret update.');
            }

      - name: Notify on success
        if: success()
        run: |
          echo "Contract deployment/upgrade completed successfully!"
          echo "Contract ID: $CONTRACT_ID"
          echo "Network: $STELLAR_NETWORK" 
